// -----------------------------------------------------------------------------
// ZX Spectrum Interface Pico based on RP2040 PICO30
// -----------------------------------------------------------------------------
// Copyright (C) 2024 BogDan Vatra <bogdan@kde.org>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
// -----------------------------------------------------------------------------

.define public B_ADDR_BASE  0       // Base pin number for address bus
.define public I_MREQ_L     14      // 0 when we have a MREQ 1 when we have a IOREQ
.define public I_RD_L       15      // 0 when we have a RD 1 when we have a WR

.define public B_DATA_BASE  16      // Base pin number for data bus

.define public O_WAIT_L     24      // 0 when we have zx has to wait
.define public O_ROMCS_L    25      // 0 when RP2040 should serve ROM
.define public O_OE_L       26      // 1 when we have disable DATA level shifter and we can use GPIOs 16 to 23 for other purposes (e.g. SPI)
.define public I_M1_L       27      // 0 when we have a M1
.define public I_CPM_L      28      // 0 when we have a CP/M
.define public I_RP_EN_L    29      // 0 when RP2040 should handle the bus

.program zx
.side_set 1
.wrap_target
    wait 0 gpio I_RP_EN_L side 1        // wait for the /RP_EN pin to be low
    in pins, 24 side 0                  // send ADDR & DATA bus to C++ word
    out pins, 8 side 0                  // set DATA from C++ world
    out pindirs, 8 side 0               // enable output
    wait 1 gpio I_RP_EN_L side 1        // wait for the /RP_EN pin to go high
    out pindirs, 8 side 1               // disable output
.wrap
